name: Release Please

on:
  push:
    branches:
      - development
      - staging
      - "releases/**"
jobs:
  release-please:
    name: Release Please
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
    steps:
      - name: Run Release Please Action
        id: release
        uses: googleapis/release-please-action@v4
        with:
          target-branch: ${{ github.ref_name }}
          config-file: "release-please-config.json"
          manifest-file: ".release-please-manifest.json"

  release-checklist:
    name: Release Checklist
    runs-on: ubuntu-latest
    needs: release-please
    if: ${{ needs.release-please.outputs.release_created }}
    steps:
      - name: Create or Update Release Checklist
        uses: actions/github-script@v7
        with:
          script: |
            const prsOutput = '${{ needs.release-please.outputs.prs }}';

            if (!prsOutput) {
              console.log('No PR data available');
              return;
            }

            let prs;
            try {
              // Use JSON.parse with a reviver function to handle control characters
              prs = JSON.parse(prsOutput.replace(/[\n\r\t]/g, ' '));
            } catch (error) {
              console.error('Failed to parse PR data:', error);
              return;
            }

            // Extract version from PR title which is typically in format: "chore(main): deploy package-name 1.2.3"
            for (const pr of Object.values(prs)) {
              const titleMatch = pr.title.match(/deploy ([^\\s]+) ([\d.-]+(?:rc(?:\.\d+)?)?)/);
              if (!titleMatch) {
                console.log(`Skipping PR: Could not parse package and version from title: ${pr.title}`);
                continue;
              }

              const [, pkg, version] = titleMatch;
              const body = `## Release Checklist for ${pkg} v${version}

              ### Development -> Staging
              - [ ] Confirm all expected changes are in changelog, and merge release-please PR #${pr.number}
              - [ ] Merge \`development\` to \`staging\`, resolving any merge conflicts
              - [ ] Ensure that deployments to \`staging\` succeed and pass smoke tests
              
              ### Staging -> Production
              - [ ] Confirm that all changes in \`main\` are in \`staging\` (cherry pick missing commits if needed)
              - [ ] Merge \`staging\` to \`main,\` resolving any merge conflicts
              - [ ] Ensure that deployments to \`main\` succeed and pass smoke tests
              
              ### Post-release verification
              - [ ] Mark release in \`Github\` as Latest 
              - [ ] Mark release in \`JIRA\` as Released 
              - [ ] Update the original Bugs Forum thread with the date and time of release to production`;

              const issueTitle = `Release Checklist: ${pkg} v${version}`;

              // Check for existing issues with the same title
              const existingIssues = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                labels: 'release-checklist'
              });

              const issueExists = existingIssues.data.some(issue => issue.title === issueTitle);

              if (issueExists) {
                console.log(`Issue "${issueTitle}" already exists, skipping creation`);
                continue;
              }
              console.log(`Creating Issue "${issueTitle}"`);

              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Release Checklist: ${pkg} v${version}`,
                body: body,
                labels: ['release-checklist']
              });
            }
